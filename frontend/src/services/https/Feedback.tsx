import axios from "axios";
import type { FeedBackInterface } from "../../interfaces/IFeedback";
import type { FeedbackTimeInterface } from "../../interfaces/IFeedbackTime";

const apiUrl = import.meta.env.VITE_API_URL;

// ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô token ‡∏™‡∏î‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡∏Ñ‡πâ‡∏≤‡∏á)
const getRequestOptions = () => {
  const token = localStorage.getItem("token") || "";
  const tokenType = localStorage.getItem("token_type") || "Bearer";
  return {
    headers: {
      "Content-Type": "application/json",
      Authorization: `${tokenType} ${token}`,
    },
  };
};

// ‚úÖ POST /feedback/create
async function CreateFeedback(data: FeedBackInterface) {
  try {
    const res = await axios.post(`${apiUrl}/feedback/create`, data, getRequestOptions());
    // (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡πà‡∏ô) ‡πÅ‡∏à‡πâ‡∏á event ‡∏ß‡πà‡∏≤‡∏°‡∏µ feedback ‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏≠‡∏∑‡πà‡∏ô‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß
    const ids = Array.isArray((data as any).DiaryIDs)
      ? (data as any).DiaryIDs
      : (data as any).DiaryID ? [(data as any).DiaryID] : [];
    if (ids.length) {
      window.dispatchEvent(new CustomEvent("feedback:created", { detail: { diaryIDs: ids } }));
    }
    return res.data;
  } catch (e: any) {
    return e.response?.data || { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" };
  }
}

// ‚úÖ GET /feedback-time
async function GetFeedbackTime(): Promise<FeedbackTimeInterface[]> {
  try {
    const res = await axios.get(`${apiUrl}/feedback-time`, getRequestOptions());
    return res.data;
  } catch (e: any) {
    console.error("Error fetching FeedbackTime:", e);
    return [];
  }
}

// üîπ ‡∏î‡∏∂‡∏á Feedback ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á Diary ‡∏ï‡∏≤‡∏° diaryId
async function GetFeedbackByDiaryID(id: number): Promise<FeedBackInterface[]> { 
  try {
    const res = await axios.get(`${apiUrl}/feedback/diary/${id}`, getRequestOptions());
    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö {data: []} ‡∏´‡∏£‡∏∑‡∏≠ [] ‡∏ï‡∏£‡∏á‡πÜ
    return res.data?.data ?? res.data ?? [];
  } catch (e: any) {
    console.error("Error fetching FeedbackByDiaryID:", e);
    return [];
  }
}

export const GetFeedbackByThoughtID = async (id: number): Promise<FeedBackInterface[]> => {
  try {
    const res = await axios.get(`${apiUrl}/feedback/thought/${id}`,getRequestOptions());
    return res.data;
  } catch (error) {
    console.error("Failed to fetch feedback by thought ID:", error);
    return [];
  }
};


// ‡∏î‡∏∂‡∏á Diary Feedback ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
 async function GetDiaryFeedback(patientId: number) {
  try {
    const res = await axios.get(`${apiUrl}/patient/feedback/diary/${patientId}`,getRequestOptions());
    return res.data;
  } catch (error) {
    console.error("Error fetching diary feedback:", error);
    return [];
  }
}
/* ----------------- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏ü‡∏µ‡∏î‡πÅ‡∏ö‡πá‡∏Å‡∏ï‡∏≤‡∏°‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà ----------------- */

// ‚úÖ GET /diary/:diaryId/feedbacks?limit=3
//   ‚Üí ‡∏õ‡∏£‡∏±‡∏ö path ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö backend ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ
async function GetFeedbacksForDiary(diaryId: number, limit = 3, bustCache = false) {
  try {
    const url = `${apiUrl}/diary/${diaryId}/feedbacks?limit=${limit}${
      bustCache ? `&t=${Date.now()}` : ""
    }`;
    const res = await axios.get(url, getRequestOptions());
    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á {items: []} / {data: []} / [] ‡∏ï‡∏£‡∏á‡πÜ
    return (res?.data?.items ?? res?.data?.data ?? res?.data ?? []) as FeedBackInterface[];
  } catch (e: any) {
    console.error("GetFeedbacksForDiary error:", e);
    return [];
  }
}


// ‡∏î‡∏∂‡∏á Thought Feedback ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
 async function GetThoughtFeedback(patientId: number) {
  try {
    const res = await axios.get(`${apiUrl}/patient/feedback/thought/${patientId}`,getRequestOptions());
    return res.data;
  } catch (error) {
    console.error("Error fetching thought feedback:", error);
    return [];
  }
}

// (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡πà‡∏ô) ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
async function GetFeedbacksByDiary(diaryId: number, limit = 3, noCache = false) {
  const bust = noCache ? `&nc=${Date.now()}` : "";
  const url = `${apiUrl}/diaries/${diaryId}/feedbacks?limit=${limit}${bust}`;
  return axios
    .get(url, getRequestOptions()) 
    .then((res) => res)
    .catch((e) => e.response);
}


// (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡πà‡∏ô) ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
// ‚úÖ GET /patient/:patientId/feedbacks?limit=10
async function GetFeedbacksByPatient(patientId: number, limit = 10, bustCache = false) {
  try {
    const url = `${apiUrl}/patient/${patientId}/feedbacks?limit=${limit}${
      bustCache ? `&t=${Date.now()}` : ""
    }`;
    const res = await axios.get(url, getRequestOptions());
    return (res?.data?.items ?? res?.data?.data ?? res?.data ?? []) as FeedBackInterface[];
  } catch (e: any) {
    console.error("GetFeedbacksByPatient error:", e);
    return [];
  }
}


export { 
    CreateFeedback,
    GetFeedbackTime,
    GetDiaryFeedback,
    GetThoughtFeedback,
    GetFeedbacksForDiary,
    GetFeedbacksByDiary,   // (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡πà‡∏ô)
    GetFeedbacksByPatient,
    GetFeedbackByDiaryID,
 };



