package ws

import (
	"encoding/json"
	"log"
	"net/http"
	"sync"

	"github.com/gorilla/websocket"
)

// Client ‡πÅ‡∏ó‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô WebSocket
type Client struct {
	Conn *websocket.Conn
	UserID string
}

// Hub ‡∏Ñ‡∏∑‡∏≠‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á WebSocket connections
type Hub struct {
	clients map[string]*Client // map[UserID]Client
	mu      sync.RWMutex
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á GlobalHub ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡∏£‡∏∞‡∏ö‡∏ö
var GlobalHub = &Hub{
	clients: make(map[string]*Client),
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° client ‡πÉ‡∏´‡∏°‡πà
func (h *Hub) AddClient(userID string, conn *websocket.Conn) {
	h.mu.Lock()
	defer h.mu.Unlock()
	h.clients[userID] = &Client{
		Conn:   conn,
		UserID: userID,
	}
	log.Printf("‚úÖ Connected WebSocket: %s | All Clients: %v\n", userID, h.clients)
}


// ‡∏•‡∏ö client
func (h *Hub) RemoveClient(userID string) {
	h.mu.Lock()
	defer h.mu.Unlock()
	if client, ok := h.clients[userID]; ok {
		client.Conn.Close()
		delete(h.clients, userID)
		log.Printf("‚ùå Disconnected WebSocket: %s\n", userID)
	}
}

func (h *Hub) SendToUser(userID string, message interface{}) {
	h.mu.RLock()
	defer h.mu.RUnlock()

	if client, ok := h.clients[userID]; ok {
		data, err := json.Marshal(message)
		if err != nil {
			log.Println("‚ùå Marshal Error:", err)
			return
		}
		log.Println("üì® Sending message to", userID, "=>", string(data))
		client.Conn.WriteMessage(websocket.TextMessage, data)
	} else {
		log.Println("‚ö†Ô∏è No active WebSocket for user:", userID)
	}
}
var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool {
		return true // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å origin ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÑ‡∏î‡πâ
	},
}

// ‚úÖ ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö route /ws/:userID
func ServeWs(w http.ResponseWriter, r *http.Request, userID string) {
	conn, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Println("‚ùå WebSocket upgrade error:", err)
		return
	}

	GlobalHub.AddClient(userID, conn)
	defer GlobalHub.RemoveClient(userID)

	// ‚úÖ ‡∏£‡∏≠‡∏≠‡πà‡∏≤‡∏ô (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ connection ‡∏ï‡∏±‡∏î ‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô input)
	for {
		if _, _, err := conn.NextReader(); err != nil {
			break
		}
	}
}