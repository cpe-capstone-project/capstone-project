import React, { useEffect, useState } from "react";
import Swal from "sweetalert2";
import { useNavigate } from "react-router-dom";
import "./Homedoc.css";
import { Calendar, dateFnsLocalizer } from "react-big-calendar";
import { format, parse, startOfWeek, getDay } from "date-fns";
import "react-big-calendar/lib/css/react-big-calendar.css";
import { th, enUS } from "date-fns/locale";
import Customcalendar from "../../components/customcalendar/customcalendar";
import folderdocImage from "../../assets/folderdoc.png";

const locales = {
  "en-US": enUS,
  th: th,
};

const localizer = dateFnsLocalizer({
  format,
  parse,
  startOfWeek,
  getDay,
  locales,
});



const Homedoc: React.FC = () => {
  const navigate = useNavigate();
  const email = localStorage.getItem("email");
  const role = localStorage.getItem("role");
  const isLogin = localStorage.getItem("isLogin");
  const [calendarDate, setCalendarDate] = useState(new Date());
  const [events, setEvents] = useState([
    {
      title: "‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏±‡∏ö ‡∏ô‡∏†‡∏±‡∏™‡∏ß‡∏£‡∏£‡∏ì",
      start: new Date(),
      end: new Date(new Date().getTime() + 30 * 60000),
    },
  ]);

  useEffect(() => {
    if (!isLogin || role !== "Psychologist") {
      Swal.fire({
        icon: "warning",
        title: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏±‡∏Å‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤",
      }).then(() => navigate("/"));
    } else {
      showNotification();
    }
  }, []);

  const showNotification = () => {
    Swal.fire({
      toast: true,
      position: "top-end",
      title: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
      html: `
        <div style="text-align: left; font-size: 14px;">
          <div style="display: flex; align-items: center; margin-bottom: 6px;">
            <div style="background-color: #e63946; color: white; border-radius: 50%; width: 20px; height: 20px;
                display: flex; align-items: center; justify-content: center; font-size: 12px; margin-right: 8px;">
              ‚ùó
            </div>
            ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ <b>3 ‡πÄ‡∏Ñ‡∏™</b>
          </div>
          <div style="display: flex; align-items: center;">
            <div style="background-color: #ffb703; color: white; border-radius: 50%; width: 20px; height: 20px;
                display: flex; align-items: center; justify-content: center; font-size: 12px; margin-right: 8px;">
              ‚ö†
            </div>
            <span>‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏à‡∏≤‡∏Å <b>‡∏ô‡∏†‡∏±‡∏™‡∏ß‡∏£‡∏£‡∏ì</b> ‚Äî ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô: <span style="color:red; font-weight:bold">‡∏™‡∏π‡∏á</span></span>
          </div>
        </div>
      `,
      showConfirmButton: false,
      background: "#ffffff",
      timer: 5000,
      timerProgressBar: true,
      customClass: { popup: "swal2-elegant-popup" },
    });
  };

  const handleSelectSlot = ({ start, end }: { start: Date; end: Date }) => {
    Swal.fire({
      title: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà",
      input: "text",
      inputLabel: "‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢",
      showCancelButton: true,
      confirmButtonText: "‡∏™‡∏£‡πâ‡∏≤‡∏á",
    }).then((result) => {
      if (result.isConfirmed && result.value) {
        const newEvent = { title: result.value, start, end };
        setEvents((prev) => [...prev, newEvent]);
        Swal.fire("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "", "success");
      }
    });
  };

  const handleSelectEvent = (event: { title: string }) => {
    Swal.fire({
      title: `‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢: ${event.title}`,
      text: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏±‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ô‡∏µ‡πâ?",
      showDenyButton: true,
      showCancelButton: true,
      confirmButtonText: "‡∏•‡∏ö",
      denyButtonText: `‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤`,
    }).then((result) => {
      if (result.isConfirmed) {
        setEvents((prev) => prev.filter((e) => e.title !== event.title));
        Swal.fire("‡∏•‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "", "success");
      } else if (result.isDenied) {
        Swal.fire("Coming Soon", "‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï", "info");
      }
    });
  };

  return (
    <div className="docflour-homepage">
      {/* Welcome Header */}
      <section className="docflour-welcome-box">
        <h1>Welcome, fellow psychologist.</h1>
        <p>Let‚Äôs take care of others ‚Äî and ourselves.</p>
      </section>

      {/* Search */}
      <section className="docflour-search-section">
        <input type="text" placeholder="Search by name, patient ID, or email" className="docflour-search-input" />
        <button className="docflour-search-button">üîç</button>
      </section>

      {/* Dashboard */}
      <section className="docflour-dashboard">
        <div className="docflour-card">
          <h3>Dashboard ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏°</h3>
          <p>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÅ‡∏•‡∏≠‡∏¢‡∏π‡πà (active patients)</p>
          <p>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ feedback</p>
          <p>üü¢ 60% ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô / üî¥ 10% ‡πÅ‡∏¢‡πà‡∏•‡∏á / üü° 30% ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà</p>
        </div>

        {/* Calendar */}
        <div className="docflour-card">
          <h3>Appointments / ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢</h3>
          <p>‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢</p>
          <div
            style={{
              height: "400px",
              background: "#ffffff",
              borderRadius: "10px",
              padding: "8px",
              boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
            }}
          >
         <Calendar
  localizer={localizer}
  events={events}
  startAccessor="start"
  endAccessor="end"
  date={calendarDate}
  onNavigate={(date) => setCalendarDate(date)}
  components={{
    toolbar: (props) => (
      <Customcalendar {...props} date={calendarDate} setDate={setCalendarDate} />
    ),
  }}
  selectable
  onSelectSlot={handleSelectSlot}
  onSelectEvent={handleSelectEvent}
  style={{ height: "100%", borderRadius: "8px" }}
/>

          </div>
        </div>
      </section>
      {/* Resource Sections */}
<section className="docflour-resources">
  <div className="docflour-folder">
  <img src={folderdocImage} alt="folder icon" className="docflour-folder-icon" />
  <p>‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• / Resource ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏à‡∏¥‡∏ï</p>
</div>
  <div className="docflour-folder">
  <img src={folderdocImage} alt="folder icon" className="docflour-folder-icon" />
  <p>‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏¥‡∏à‡∏±‡∏¢ / ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤</p>
</div>
  <div className="docflour-mood-tracker">
    <h4>Mood Tracker ‡∏£‡∏ß‡∏°</h4>
    <p>‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô / ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô<br />‡πÅ‡∏ö‡∏ö heatmap ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô</p>
  </div>
</section>

    </div>
    
  );
};

export default Homedoc;
